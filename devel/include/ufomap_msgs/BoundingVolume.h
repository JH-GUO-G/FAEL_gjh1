// Generated by gencpp from file ufomap_msgs/BoundingVolume.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_BOUNDINGVOLUME_H
#define UFOMAP_MSGS_MESSAGE_BOUNDINGVOLUME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/AABB.h>
#include <ufomap_msgs/Frustum.h>
#include <ufomap_msgs/LineSegment.h>
#include <ufomap_msgs/OBB.h>
#include <ufomap_msgs/Plane.h>
#include <ufomap_msgs/Point.h>
#include <ufomap_msgs/Ray.h>
#include <ufomap_msgs/Sphere.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct BoundingVolume_
{
  typedef BoundingVolume_<ContainerAllocator> Type;

  BoundingVolume_()
    : aabbs()
    , frustums()
    , line_segments()
    , obbs()
    , planes()
    , points()
    , rays()
    , spheres()  {
    }
  BoundingVolume_(const ContainerAllocator& _alloc)
    : aabbs(_alloc)
    , frustums(_alloc)
    , line_segments(_alloc)
    , obbs(_alloc)
    , planes(_alloc)
    , points(_alloc)
    , rays(_alloc)
    , spheres(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ufomap_msgs::AABB_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::AABB_<ContainerAllocator> >> _aabbs_type;
  _aabbs_type aabbs;

   typedef std::vector< ::ufomap_msgs::Frustum_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::Frustum_<ContainerAllocator> >> _frustums_type;
  _frustums_type frustums;

   typedef std::vector< ::ufomap_msgs::LineSegment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::LineSegment_<ContainerAllocator> >> _line_segments_type;
  _line_segments_type line_segments;

   typedef std::vector< ::ufomap_msgs::OBB_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::OBB_<ContainerAllocator> >> _obbs_type;
  _obbs_type obbs;

   typedef std::vector< ::ufomap_msgs::Plane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::Plane_<ContainerAllocator> >> _planes_type;
  _planes_type planes;

   typedef std::vector< ::ufomap_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef std::vector< ::ufomap_msgs::Ray_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::Ray_<ContainerAllocator> >> _rays_type;
  _rays_type rays;

   typedef std::vector< ::ufomap_msgs::Sphere_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_msgs::Sphere_<ContainerAllocator> >> _spheres_type;
  _spheres_type spheres;





  typedef boost::shared_ptr< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingVolume_

typedef ::ufomap_msgs::BoundingVolume_<std::allocator<void> > BoundingVolume;

typedef boost::shared_ptr< ::ufomap_msgs::BoundingVolume > BoundingVolumePtr;
typedef boost::shared_ptr< ::ufomap_msgs::BoundingVolume const> BoundingVolumeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::BoundingVolume_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::BoundingVolume_<ContainerAllocator1> & lhs, const ::ufomap_msgs::BoundingVolume_<ContainerAllocator2> & rhs)
{
  return lhs.aabbs == rhs.aabbs &&
    lhs.frustums == rhs.frustums &&
    lhs.line_segments == rhs.line_segments &&
    lhs.obbs == rhs.obbs &&
    lhs.planes == rhs.planes &&
    lhs.points == rhs.points &&
    lhs.rays == rhs.rays &&
    lhs.spheres == rhs.spheres;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::BoundingVolume_<ContainerAllocator1> & lhs, const ::ufomap_msgs::BoundingVolume_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82212eec286e703b5b3c33cc90377d90";
  }

  static const char* value(const ::ufomap_msgs::BoundingVolume_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82212eec286e703bULL;
  static const uint64_t static_value2 = 0x5b3c33cc90377d90ULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/BoundingVolume";
  }

  static const char* value(const ::ufomap_msgs::BoundingVolume_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
;
  }

  static const char* value(const ::ufomap_msgs::BoundingVolume_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aabbs);
      stream.next(m.frustums);
      stream.next(m.line_segments);
      stream.next(m.obbs);
      stream.next(m.planes);
      stream.next(m.points);
      stream.next(m.rays);
      stream.next(m.spheres);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingVolume_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::BoundingVolume_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "aabbs: ";
    if (v.aabbs.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.aabbs.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::AABB_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.aabbs[i]);
    }
    if (v.aabbs.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frustums: ";
    if (v.frustums.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.frustums.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::Frustum_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.frustums[i]);
    }
    if (v.frustums.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "line_segments: ";
    if (v.line_segments.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.line_segments.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::LineSegment_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.line_segments[i]);
    }
    if (v.line_segments.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "obbs: ";
    if (v.obbs.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.obbs.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::OBB_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.obbs[i]);
    }
    if (v.obbs.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "planes: ";
    if (v.planes.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.planes.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::Plane_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.planes[i]);
    }
    if (v.planes.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "points: ";
    if (v.points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.points[i]);
    }
    if (v.points.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rays: ";
    if (v.rays.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.rays.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::Ray_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.rays[i]);
    }
    if (v.rays.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "spheres: ";
    if (v.spheres.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.spheres.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ufomap_msgs::Sphere_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.spheres[i]);
    }
    if (v.spheres.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_BOUNDINGVOLUME_H
